class Solution {
    public int catMouseGame(int[][] graph) {
        int n = graph.length; 
        int[][][] color = new int[n][n][2]; 
        int[][][] degree = new int[n][n][2];
       
        for (int m = 0; m < n; m++) {
            for (int c = 0; c < n; c++) {
                degree[m][c][0] = graph[m].length; 
                degree[m][c][1] = graph[c].length; 
                for (int next : graph[c]) {
                    if (next == 0) degree[m][c][1]--; 
                }
            }
        }

        Queue<int[]> queue = new LinkedList<>();

        for (int i = 1; i < n; i++) {
            for (int t = 0; t < 2; t++) {
                color[0][i][t] = 1; 
                queue.offer(new int[]{0, i, t, 1});
                color[i][i][t] = 2;
                queue.offer(new int[]{i, i, t, 2});
            }
        }

        
        while (!queue.isEmpty()) {
            int[] state = queue.poll();
            int m = state[0], c = state[1], t = state[2], res = state[3];
            for (int[] prev : getPrev(graph, m, c, t)) {
                int pm = prev[0], pc = prev[1], pt = prev[2];
                if (color[pm][pc][pt] != 0) continue;
                
                if ((res == 1 && pt == 0) || (res == 2 && pt == 1)) {
                    color[pm][pc][pt] = res;
                    queue.offer(new int[]{pm, pc, pt, res});
                } else {
                    degree[pm][pc][pt]--;
                    if (degree[pm][pc][pt] == 0) {
                        color[pm][pc][pt] = pt == 0 ? 2 : 1;
                        queue.offer(new int[]{pm, pc, pt, color[pm][pc][pt]});
                    }
                }
            }
        }
        return color[1][2][0];
    }

   
    private List<int[]> getPrev(int[][] graph, int m, int c, int t) {
        List<int[]> prev = new ArrayList<>();
        if (t == 0) { 
            for (int pc : graph[c]) {
                if (pc == 0) continue; 
                prev.add(new int[]{m, pc, 1});
            }
        } else { 
            for (int pm : graph[m]) {
                prev.add(new int[]{pm, c, 0});
            }
        }
        return prev;
    }
}
