class Solution {
    int n;
    public int largestIsland(int[][] grid) {
        n = grid.length;
        int id = 2;
        int[] area = new int[n * n + 2];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (grid[i][j] == 1)
                    area[id] = dfs(grid, i, j, id++);
        int res = 0;
        for (int a : area) res = Math.max(res, a);
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    Set<Integer> seen = new HashSet<>();
                    int cur = 1;
                    for (int[] d : dirs) {
                        int x = i + d[0], y = j + d[1];
                        if (x >= 0 && y >= 0 && x < n && y < n && grid[x][y] > 1 && seen.add(grid[x][y]))
                            cur += area[grid[x][y]];
                    }
                    res = Math.max(res, cur);
                }
            }
        }
        return res;
    }
    private int dfs(int[][] g, int i, int j, int id) {
        if (i < 0 || j < 0 || i >= n || j >= n || g[i][j] != 1) return 0;
        g[i][j] = id;
        return 1 + dfs(g, i+1, j, id) + dfs(g, i-1, j, id) + dfs(g, i, j+1, id) + dfs(g, i, j-1, id);
    }
}
