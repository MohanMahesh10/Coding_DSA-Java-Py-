
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Codec {


    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        return sb.toString();
    }

    private void serializeHelper(TreeNode node, StringBuilder sb) {
        if (node == null) return; 
        sb.append(node.val).append(",");
        serializeHelper(node.left, sb);
        serializeHelper(node.right, sb);
    }

    
    public TreeNode deserialize(String data) {
        if (data.isEmpty()) return null;
        String[] values = data.split(",");
        Queue<Integer> queue = new LinkedList<>();
        for (String val : values) queue.offer(Integer.parseInt(val));
        return buildBST(queue, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private TreeNode buildBST(Queue<Integer> queue, int lower, int upper) {
        if (queue.isEmpty()) return null;
        int val = queue.peek();
        if (val < lower || val > upper) return null;

        queue.poll();
        TreeNode node = new TreeNode(val);
        node.left = buildBST(queue, lower, val);
        node.right = buildBST(queue, val, upper);
        return node;
    }
}
