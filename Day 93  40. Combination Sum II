class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        // Sort the array to handle duplicates
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }
    
    private void backtrack(int[] candidates, int remain, int start, List<Integer> current, List<List<Integer>> result) {
        // Base case: if the remaining sum is 0, we found a valid combination
        if (remain == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        
        // If remaining sum is negative, or we've gone through all candidates, stop
        if (remain < 0 || start >= candidates.length) {
            return;
        }
        
        for (int i = start; i < candidates.length; i++) {
            // Skip duplicates to avoid duplicate combinations
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            
            // Add the current candidate to our combination
            current.add(candidates[i]);
            
            // Recursively try to find combinations with the current number included
            // Note that we use i+1 since each number can only be used once
            backtrack(candidates, remain - candidates[i], i + 1, current, result);
            
            // Backtrack: remove the last added element to try other combinations
            current.remove(current.size() - 1);
        }
    }
}
