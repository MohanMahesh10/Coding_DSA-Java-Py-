class Solution {
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if (maxChoosableInteger >= desiredTotal) {
            return true;
        }
        
        int sum = maxChoosableInteger * (maxChoosableInteger + 1) / 2;
        if (sum < desiredTotal) {
            return false;
        }
        
        Map<Integer, Boolean> memo = new HashMap<>();
        return canWin(maxChoosableInteger, desiredTotal, 0, memo);
    }
    
    private boolean canWin(int maxChoosableInteger, int desiredTotal, int used, Map<Integer, Boolean> memo) {
        if (memo.containsKey(used)) {
            return memo.get(used);
        }
        
        for (int i = 0; i < maxChoosableInteger; i++) {
            if ((used & (1 << i)) == 0) {
                if (desiredTotal <= i + 1 || !canWin(maxChoosableInteger, desiredTotal - (i + 1), used | (1 << i), memo)) {
                    memo.put(used, true);
                    return true;
                }
            }
        }
        
        memo.put(used, false);
        return false;
    }
}
