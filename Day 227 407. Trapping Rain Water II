import java.util.*;

class Solution {
    public int trapRainWater(int[][] heightMap) {
        if (heightMap == null || heightMap.length == 0 || heightMap[0].length == 0) return 0;
        int m = heightMap.length;
        int n = heightMap[0].length;
        if (m < 3 || n < 3) return 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        boolean[][] vis = new boolean[m][n];

        for (int i = 0; i < m; i++) {
            pq.offer(new int[]{i, 0, heightMap[i][0]});
            vis[i][0] = true;
            pq.offer(new int[]{i, n - 1, heightMap[i][n - 1]});
            vis[i][n - 1] = true;
        }
        for (int j = 1; j < n - 1; j++) {
            pq.offer(new int[]{0, j, heightMap[0][j]});
            vis[0][j] = true;
            pq.offer(new int[]{m - 1, j, heightMap[m - 1][j]});
            vis[m - 1][j] = true;
        }

        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        int water = 0;
        int maxBoundary = Integer.MIN_VALUE;

        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int x = cur[0], y = cur[1], h = cur[2];
            maxBoundary = Math.max(maxBoundary, h);

            for (int[] d : dirs) {
                int nx = x + d[0], ny = y + d[1];
                if (nx < 0 || ny < 0 || nx >= m || ny >= n || vis[nx][ny]) continue;
                vis[nx][ny] = true;

                int nh = heightMap[nx][ny];
                if (nh < maxBoundary) water += maxBoundary - nh;

                pq.offer(new int[]{nx, ny, Math.max(nh, maxBoundary)});
            }
        }
        return water;
    }
}
