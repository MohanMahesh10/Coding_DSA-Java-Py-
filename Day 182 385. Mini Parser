class Solution {
    public NestedInteger deserialize(String s) {
        if (s.charAt(0) != '[') {
            return new NestedInteger(Integer.parseInt(s));
        }

        Stack<NestedInteger> stack = new Stack<>();
        int num = 0;
        boolean negative = false;
        boolean hasNum = false;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (c == '-') {
                negative = true;
            } else if (Character.isDigit(c)) {
                num = num * 10 + (c - '0');
                hasNum = true;
            } else if (c == '[') {
                stack.push(new NestedInteger());
            } else if (c == ',' || c == ']') {
                if (hasNum) {
                    if (negative) num = -num;
                    stack.peek().add(new NestedInteger(num));
                }
                num = 0;
                hasNum = false;
                negative = false;

                if (c == ']' && stack.size() > 1) {
                    NestedInteger ni = stack.pop();
                    stack.peek().add(ni);
                }
            }
        }

        return stack.isEmpty() ? new NestedInteger() : stack.pop();
    }
}
