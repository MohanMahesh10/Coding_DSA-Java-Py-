import java.util.*;

class Solution {
    public int minMutation(String startGene, String endGene, String[] bank) {
        Set<String> valid = new HashSet<>(Arrays.asList(bank));
        if (!valid.contains(endGene)) return -1;

        Queue<String> q = new ArrayDeque<>();
        q.offer(startGene);
        Set<String> seen = new HashSet<>();
        seen.add(startGene);

        char[] chars = new char[]{'A', 'C', 'G', 'T'};

        int steps = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            for (int s = 0; s < size; s++) {
                String cur = q.poll();
                if (cur.equals(endGene)) return steps;

                char[] arr = cur.toCharArray();

                for (int i = 0; i < arr.length; i++) {
                    char orig = arr[i];
                    for (char c : chars) {
                        if (c == orig) continue;
                        arr[i] = c;
                        String next = new String(arr);
                        if (valid.contains(next) && !seen.contains(next)) {
                            seen.add(next);
                            q.offer(next);
                        }
                    }
                    arr[i] = orig;
                }
            }
            steps++;
        }
        return -1;
    }
}
