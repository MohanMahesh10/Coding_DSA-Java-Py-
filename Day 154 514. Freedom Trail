class Solution {
    public int findRotateSteps(String ring, String key) {
       
        Map<Character, List<Integer>> charToIndex = new HashMap<>();
       
        for (int i =0; i < ring.length(); i++) {
            charToIndex.computeIfAbsent(ring.charAt(i), k -> new ArrayList<>()).add(i);
        }
     
        int[][] memo = new int[ring.length()][key.length()];
      
        for (int[] arr : memo) Arrays.fill(arr, -1);
       
        return dp(0,0, ring, key, charToIndex, memo);
    }
   
    private int dp(int ringPos, int keyPos, String ring, String key, Map<Character, List<Integer>> charToIndex, int[][] memo) {
      
        if (keyPos == key.length()) return 0;
       
        if (memo[ringPos][keyPos] !=-1) return memo[ringPos][keyPos];
        int minSteps = Integer.MAX_VALUE;
      
        for (int idx : charToIndex.get(key.charAt(keyPos))) {
          
            int dist = Math.abs(ringPos - idx);
            int step = Math.min(dist, ring.length() - dist);
            int totalSteps = step + 1 + dp(idx, keyPos +1, ring, key, charToIndex, memo);
          
            minSteps = Math.min(minSteps, totalSteps);
        }
    
        return memo[ringPos][keyPos] = minSteps;
    }
}
